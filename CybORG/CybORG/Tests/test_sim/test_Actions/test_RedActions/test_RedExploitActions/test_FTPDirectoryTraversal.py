import pytest 
from red_exploit_fixtures import cyborg, params, obs_failure, red_killchain, prioritised_killchain, HOSTNAMES
import itertools 
from CybORG.Shared.Actions import FTPDirectoryTraversal
from CybORG.Shared.Enums import SessionType, OperatingSystemType, ProcessType, ProcessState
from CybORG.Tests.EphemeralPort import Win2008EphemeralPort, LinuxEphemeralPort

@pytest.mark.parametrize('parameter', ['ip_address','session','agent','target_session'])
def test_FTPDirectoryTraversal_junk_input(prioritised_killchain,cyborg,params,parameter):
    # Here we make sure the action handles junk inputs properly.
    red_killchain = prioritised_killchain(cyborg,HOSTNAMES,priority=FTPDirectoryTraversal)
    cyborg = red_killchain['cyborg']
    ip = cyborg.get_ip_map()['User1']
    params['ip_address'] = ip
    params[parameter] = 'Junk'
    action = FTPDirectoryTraversal(**params)
    _ = cyborg.step(action=action,agent='Red')
    last_action = cyborg.get_last_action('Red')

    assert 'Invalid' in last_action.__class__.__name__

@pytest.mark.parametrize('host',HOSTNAMES)
def test_FTPDirectoryTraversal_initial_state(cyborg, params, obs_failure, host):
    # Here we test the actions out from the initial state.
    ip = cyborg.get_ip_map()[host]
    action = FTPDirectoryTraversal(ip_address=ip,**params)
    results = cyborg.step(action=action,agent='Red')

    assert results.observation == obs_failure

@pytest.mark.parametrize('host',HOSTNAMES)
def test_FTPDirectoryTraversal_killchain(prioritised_killchain, host, cyborg):
    # Here we test the actions during the killchain.
    red_killchain = prioritised_killchain(cyborg,HOSTNAMES,priority=FTPDirectoryTraversal)
    exploits = [x[1] for x in red_killchain['history'] if (x[0] == 'FTPDirectoryTraversal') and (x[2] == host)]
    if len(exploits) > 0:
        obs = exploits[0]
        assert obs['success'] == True

        hostids = [ip for ip in obs.keys() if ip!='success']
        assert len(hostids) == 2                                                # Ensure only two hosts.

        target_ip = red_killchain['cyborg'].get_ip_map()[host]
        assert target_ip.compressed in obs
        source_ip = red_killchain['cyborg'].get_ip_map()['User0']
        assert source_ip.compressed in obs

        target_host = obs[target_ip.compressed]
        expected_keys = sorted(['Interface', 'Processes', 'Sessions', 'System info'])
        assert sorted([x for x in target_host.keys()]) == expected_keys        
        assert target_host['Interface'] == [{'IP Address': target_ip}]
        os_type = cyborg.environment_controller.state.hosts[host].os_type

        assert target_host['System info'] == {'Hostname':host, 'OSType':os_type}
        assert len(target_host['Sessions']) == 1
        session = target_host['Sessions'][0]
        assert session['Agent'] == 'Red'
        assert type(session['ID']) == int
        assert session['Type'] == SessionType.RED_REVERSE_SHELL
        
        target_processes = target_host['Processes']
        assert len(target_processes) == 2
        assert all([sorted(x.keys()) == sorted(['Process Type', 'Connections']) for x in target_processes])

        target_fileserver = [x for x in target_processes if x['Process Type']==ProcessType.FEMITTER]
        assert len(target_fileserver) == 1
        assert len(target_fileserver[0]['Connections']) == 1
        target_fileserver_connections = target_fileserver[0]['Connections'][0]
        assert sorted(target_fileserver_connections.keys()) == sorted(['Status','local_address','local_port'])
        assert target_fileserver_connections['Status'] == ProcessState.OPEN
        assert target_fileserver_connections['local_address'] == target_ip
        assert target_fileserver_connections['local_port'] == 21

        target_reverse_session =  [x for x in target_processes if x['Process Type']==ProcessType.REVERSE_SESSION]
        assert len(target_reverse_session) == 1
        assert len(target_reverse_session[0]['Connections']) == 1
        target_reverse_session_connections = target_reverse_session[0]['Connections'][0]
        assert sorted(target_reverse_session_connections.keys()) == \
                sorted(['local_address', 'local_port', 'remote_address', 'remote_port'])
        assert target_reverse_session_connections['local_address'] == target_ip
        assert target_reverse_session_connections['local_port'] == Win2008EphemeralPort() \
                if os_type is OperatingSystemType.WINDOWS else LinuxEphemeralPort()
        assert target_reverse_session_connections['remote_address'] == source_ip
        assert target_reverse_session_connections['remote_port'] == 4444
        
        source_host = obs[source_ip.compressed]
        expected_keys = sorted(['Interface', 'Processes'])
        assert sorted([x for x in source_host.keys()]) == expected_keys
        assert source_host['Interface'] == [{'IP Address': source_ip}]
        source_processes = source_host['Processes']
        assert len(source_processes) == 1
        assert sorted(source_processes[0].keys()) == sorted(['Connections','Process Type'])
        assert source_processes[0]['Process Type'] == ProcessType.REVERSE_SESSION_HANDLER
        assert len(source_processes[0]['Connections']) == 1

        source_connection = source_processes[0]['Connections'][0]
        assert source_connection['local_address'] == source_ip
        assert source_connection['local_port'] == 4444
        assert source_connection['remote_address'] == target_ip
        assert source_connection['remote_port'] == Win2008EphemeralPort() if os_type is OperatingSystemType.WINDOWS \
                else LinuxEphemeralPort()

@pytest.mark.parametrize('host',HOSTNAMES)
def test_FTPDirectoryTraversal_session_type(prioritised_killchain, host, cyborg):
    red_killchain = prioritised_killchain(cyborg,HOSTNAMES,priority=FTPDirectoryTraversal)
    valid_hosts = [x[2] for x in red_killchain['history'] if (x[0] == 'FTPDirectoryTraversal')]
    assert len(valid_hosts) > 0

    # if host in valid_hosts:
        # cyborg = red_killchain['cyborg']
        # state = cyborg.environment_controller.state
        # assert state.hosts[host].os_type == OperatingSystemType.LINUX

        # session_number = state.hosts[host].sessions['Red'][0]
        # session = state.sessions['Red'][session_number]
        # assert session.username == 'root'


@pytest.mark.parametrize('host', HOSTNAMES)
def test_FTPDirectoryTraversal_followup(prioritised_killchain,cyborg, params, host, obs_failure):
    # Here we test the actions after a full killchain has been performed.
    red_killchain = prioritised_killchain(cyborg,HOSTNAMES,priority=FTPDirectoryTraversal)
    cyborg = red_killchain['cyborg']
    ip = cyborg.get_ip_map()[host]
    action = FTPDirectoryTraversal(ip_address=ip,**params)
    results = cyborg.step(action=action,agent='Red')

    exploits = [x[1] for x in red_killchain['history'] if (x[0] == 'FTPDirectoryTraversal') and (x[2] == host)]
    expected_obs = exploits[0] if len(exploits)==1 else obs_failure


    assert results.observation['success'] == expected_obs['success']
